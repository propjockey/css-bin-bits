:root,
.theme-preferred,
.theme-not-preferred,
.theme-light,
.theme-dark {
  /* all theme color values are DRY, defined here, once only */
  --theme_0_light: 0 0% 0%;
  --theme_1_light: 38 100% 98%;
  --theme_2_light: 170 34% 73%;
  --theme_3_light: 178 42% 32%;
  --theme_4_light: 7 85% 61%;
  --theme_0: var(--theme_0_light, 0 0% 100%);
  --theme_1: var(--theme_1_light, 300 8% 13%);
  --theme_2: var(--theme_2_light, 165 32% 90%);
  --theme_3: var(--theme_3_light, 178 49% 44%);
  --theme_4: var(--theme_4_light, 332 82% 41%);
}

/* Unfortunately, with the previous IACVT spec still implemented for most browsers, */
/* you have to repeat the internal light vars 3x, but all with initial as the value */
/* So if the color VALUE changes, it's only updated once, the rest shouldn't change */
/* See a SUPER DRY version at https://codepen.io/james0x57/pen/RwVNybQ?editors=1100 */
/* (the super dry one only works for browsers with the new IACVT spec implemented.) */

.theme-dark {
  --theme_0_light: initial;
  --theme_1_light: initial;
  --theme_2_light: initial;
  --theme_3_light: initial;
  --theme_4_light: initial;
}
@media not all and (prefers-color-scheme: light) {
  :root,
  .theme-preferred {
    --theme_0_light: initial;
    --theme_1_light: initial;
    --theme_2_light: initial;
    --theme_3_light: initial;
    --theme_4_light: initial;
  }
}
@media (prefers-color-scheme: light) {
  .theme-not-preferred {
    --theme_0_light: initial;
    --theme_1_light: initial;
    --theme_2_light: initial;
    --theme_3_light: initial;
    --theme_4_light: initial;
  }
}

/* <3 */
.theme-transpride {
  --theme_0: 0 0% 100%;
  --theme_1: 0 0% 15%;
  --theme_2: 196 94% 67%;
  --theme_3: 349 79% 82%;
  --theme_4: 0 0% 100%;
}

:root {
  --at-property-integers-supported: initial;
  --at-property-integers-unsupported: ;
}
@supports (background: paint(css-bin-bits)) or (
  (-webkit-hyphens: none) and (font-size-adjust: from-font)
) or (
  (-moz-appearance: none) and (width: 1rlh)
) {
  /* is Chrome or (is Safari and >= v17) or (Firefox and >= v120) */
  /* @property is supported with correct integer rounding */
  :root {
    --at-property-integers-supported: ;
    --at-property-integers-unsupported: initial;
  }
}

:root {
  --at-prop-bg-if-failed: var(--at-property-integers-unsupported) var(--theme_4);
  --at-prop-color-if-failed: var(--at-property-integers-unsupported) var(--theme_0);
  --at-prop-bg: var(--at-prop-bg-if-failed, var(--theme_3));
  --at-prop-color: var(--at-prop-color-if-failed, var(--theme_1));
}

a,
a:link {
  color: hsl(var(--at-prop-bg));
  text-decoration: none;
}
a:visited {
  color: hsl(var(--theme_3));
}
a:hover,
a:active,
a:focus {
  background-color: hsl(var(--at-prop-bg));
  color: hsl(var(--at-prop-color));
}

a[href^="#"] {
  width: 2rem;
  height: 2rem;
  position: absolute;
  display: grid;
}
a[href^="#"]::after,
a[href^="#"]:hover::after {
  content: "";
  --mask: url("../assets/link.svg") center center / 80% 80% no-repeat;
  -webkit-mask: var(--mask);
  mask: var(--mask);
  background: currentColor;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  font-size: 1rem;
  font-family: sans-serif;
  background: hsl(var(--theme_1));
  color: hsl(var(--theme_0));
}
body {
  background: linear-gradient(hsl(var(--theme_0) / 0.1), hsl(var(--theme_0) / 0.1)), hsl(var(--theme_1));
  --main-width: min(100vw, 60rem);
  --rail-width: (50% - var(--main-width) / 2);
  padding-bottom: 10rem;
}
@supports (mix-blend-mode: overlay) {
  body::before {
    content: "";
    position: fixed;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    z-index: 999;
    pointer-events: none;
    background: url(/assets/noise.png);
    mix-blend-mode: overlay;
    opacity: 0.5;
  }
}
code {
  display: inline-block;
  font-family: monospace;
  font-size: 0.8rem;
  font-weight: bold;
  padding: 0.5rem;
  color: hsl(var(--theme_3));
  background-color: hsl(var(--theme_1));
  border: 1px solid hsl(var(--theme_4));
}
code.console::before {
  content: "$ ";
}
code b {
  font-size: 1rem;
  font-weight: bold;
  white-space: nowrap;
  color: hsl(var(--theme_0));
}
